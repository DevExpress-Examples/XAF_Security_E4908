@using Blazor.WebAssembly.Models
@using Blazor.WebAssembly.Services
@inject WebAPIAuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject IWebAPI WebApi
@inject ILocalStorageService LocalStorageService;
<AuthorizeView>
    <Authorized>
        <a href="" @onclick="OnProfileClicked">Hello @context.User.Identity?.Name</a>
        <button type="button"  @onclick="Logout" class="nav-link btn btn-link">Log out</button>
    </Authorized>
    <NotAuthorized>
        <a href="/login">Log in</a>
    </NotAuthorized>
</AuthorizeView>
<DxPopup HeaderText="Profile" @bind-Visible="@PopupVisible">
    <BodyContentTemplate >
        <div>
            <label for="userId">UserID:</label>
            <label id="userId" >@_userId</label>
        </div>
        <div>
            <label for="loginProviderUserId">LoginProviderUserID:</label>
            <label id="loginProviderUserId">@_loginProviderUserId</label>
        </div>
        <div>
            <label for="Email">Email:</label>
            <label id="Email">@_userEmail</label>
        </div>
    </BodyContentTemplate>
</DxPopup>

@code {
    private string? _userId;
    private string? _loginProviderUserId;
    private string? _userEmail;
    bool PopupVisible { get; set; } = false;

    private async Task Logout() {
        if (await WebApi.LogoutAsync()) {
            AuthStateProvider.ClearAuthInfo();
            await LocalStorageService.RemoveItemAsync("IsAuthenticated");
            NavigationManager.NavigateTo("/", true);
        }
    }

    private async Task OnProfileClicked() {
        var userClaims = (await AuthStateProvider.GetAuthenticationStateAsync()).User.Claims;
        _loginProviderUserId = userClaims.First(claim => claim.Type == nameof(UserModel.LoginProviderUserId)).Value;
        _userId = userClaims.First(claim => claim.Type == nameof(UserModel.XafUserId)).Value;
        _userEmail = userClaims.First(claim => claim.Type == nameof(UserModel.Email)).Value;
        PopupVisible = true;
    }

}