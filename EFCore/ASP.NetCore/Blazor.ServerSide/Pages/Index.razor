@page "/"
@attribute [Authorize]
@implements IDisposable
@inject IObjectSpaceFactory objectSpaceFactory
@inject ISecurityProvider securityProvider

<div style="text-align: right; margin: 10px">
    <a class="ml-md-auto btn btn-primary" href="/logout">Log Out</a>
</div>

<DxGrid Data="employees"
        @ref=grid
        KeyFieldName="@nameof(Employee.ID)"
        PageSize="20" ShowFilterRow="true"
        AllowSort="true"
        ValidationEnabled="false"
        CustomizeEditModel="Grid_CustomizeEditModel"
        EditModelSaving="Grid_EditModelSaving"
        DataItemDeleting="Grid_DataItemDeleting"
        EditMode="GridEditMode.EditRow"
        KeyboardNavigationEnabled="true">
    <Columns>
        <DxGridCommandColumn Width="140px" NewButtonVisible=@(security.CanCreate<Employee>())>
            <CellDisplayTemplate>
                @if(security.CanWrite(context.DataItem)) {
                    <DxButton Text="Edit" Click="@(() => context.Grid.StartEditRowAsync(context.VisibleIndex))" RenderStyle="ButtonRenderStyle.Link" />
                }
                @if(security.CanDelete(context.DataItem)) {
                    <DxButton Text="Delete" Click="@(() => context.Grid.ShowRowDeleteConfirmation(context.VisibleIndex))" RenderStyle="ButtonRenderStyle.Link" />
                }
            </CellDisplayTemplate>
        </DxGridCommandColumn>
        <DxGridDataColumn FieldName="@nameof(Employee.FirstName)">
            <CellDisplayTemplate>
                <SecuredDisplayCellTemplate CurrentObject="@context.DataItem" PropertyName="@nameof(Employee.FirstName)">
                    @(((Employee)context.DataItem).FirstName)
                </SecuredDisplayCellTemplate>
            </CellDisplayTemplate>
            <CellEditTemplate>
                <SecuredEditCellTemplate Context=readOnly CurrentObject=editableEmployee PropertyName=@nameof(Employee.FirstName)>
                    <DxTextBox @bind-Text=((EditableEmployee)context.EditModel).FirstName ReadOnly=@readOnly />
                </SecuredEditCellTemplate>
            </CellEditTemplate>
        </DxGridDataColumn>
        <DxGridDataColumn FieldName="@nameof(Employee.LastName)">
            <CellDisplayTemplate>
                <SecuredDisplayCellTemplate CurrentObject="@context.DataItem" PropertyName="@nameof(Employee.LastName)">
                    @(((Employee)context.DataItem).LastName)
                </SecuredDisplayCellTemplate>
            </CellDisplayTemplate>
            <CellEditTemplate>
                <SecuredEditCellTemplate Context="readOnly" CurrentObject=editableEmployee PropertyName=@nameof(Employee.LastName)>
                    <DxTextBox @bind-Text=((EditableEmployee)context.EditModel).LastName ReadOnly=@readOnly />
                </SecuredEditCellTemplate>
            </CellEditTemplate>
        </DxGridDataColumn>
        <DxGridDataColumn FieldName="@nameof(Employee.Email)">
            <CellDisplayTemplate>
                <SecuredDisplayCellTemplate CurrentObject="@context.DataItem" PropertyName="@nameof(Employee.Email)">
                    @(((Employee)context.DataItem).Email)
                </SecuredDisplayCellTemplate>
            </CellDisplayTemplate>
            <CellEditTemplate>
                <SecuredEditCellTemplate Context="readOnly" CurrentObject=editableEmployee PropertyName=@nameof(Employee.Email)>
                    <DxTextBox @bind-Text=((EditableEmployee)context.EditModel).Email ReadOnly=@readOnly />
                </SecuredEditCellTemplate>
            </CellEditTemplate>
        </DxGridDataColumn>
        <DxGridDataColumn FieldName=@($"{nameof(Employee.Department)}.{nameof(Department.Title)}") Caption="Department">
            <CellDisplayTemplate>
                <SecuredDisplayCellTemplate CurrentObject="@context.DataItem" PropertyName="@nameof(Employee.Department)">
                    @(((Employee)context.DataItem).Department?.Title)
                </SecuredDisplayCellTemplate>
            </CellDisplayTemplate>
            <CellEditTemplate>
                <SecuredEditCellTemplate Context="readOnly" CurrentObject=editableEmployee PropertyName=@nameof(Employee.Department)>
                    <DxComboBox Data="@departments" ReadOnly=@readOnly @bind-Value=((EditableEmployee)context.EditModel).Department />
                </SecuredEditCellTemplate>
            </CellEditTemplate>
        </DxGridDataColumn>
    </Columns>
</DxGrid>

@code {
    IGrid grid;
    IQueryable<Employee> employees;
    IQueryable<Department> departments;
    IObjectSpace objectSpace;
    Employee editableEmployee;
    SecurityStrategy security;

    protected override void OnInitialized() {
        security = (SecurityStrategy)securityProvider.GetSecurity();
        objectSpace = objectSpaceFactory.CreateObjectSpace<Employee>();
        employees = objectSpace.GetObjectsQuery<Employee>();
        departments = objectSpace.GetObjectsQuery<Department>();
        base.OnInitialized();
    }

    void Grid_CustomizeEditModel(GridCustomizeEditModelEventArgs e) {
        e.EditModel = e.IsNew ? new EditableEmployee() : ((Employee)e.DataItem).ToModel();
        editableEmployee = (Employee)e.DataItem;
    }
    void Grid_EditModelSaving(GridEditModelSavingEventArgs e) {
        Employee employee = e.IsNew ? objectSpace.CreateObject<Employee>() : (Employee)e.DataItem;
        ((EditableEmployee)e.EditModel).FromModel(employee);
        UpdateData();
    }
    void Grid_DataItemDeleting(GridDataItemDeletingEventArgs e) {
        objectSpace.Delete(e.DataItem);
        UpdateData();
    }
    void UpdateData() {
        objectSpace.CommitChanges();
        employees = objectSpace.GetObjectsQuery<Employee>();
        editableEmployee = null;
    }
    public void Dispose() {
        objectSpace?.Dispose();
    }
}